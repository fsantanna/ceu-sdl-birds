#include "c.ceu"
#include "sdl/sdl.ceu"

#define PI 3.14

var SDL_Color bg = val SDL_Color(0x00,0x00,0x00,0xFF);

var&? SDL_Init sdl = spawn SDL_Init("Birds - 07 (break/bounded)", 640,480, bg);
watching sdl do
    var& SDL_Open_Image img_up =
        spawn SDL_Open_Image(&sdl!.ren, "res/clumsy_up.png");
    var& SDL_Open_Image img_dn =
        spawn SDL_Open_Image(&sdl!.ren, "res/clumsy_dn.png");

    code/await Bird (var int y, var int speed) -> FOREVER
    do
        var SDL_Rect rct = val SDL_Rect(20,y, 50,45);

        var float sin = 0;
        par do
            var int yy = rct.y;
            var float x = rct.x;
            var int dt;
            every dt in SDL_DT do
                var float v = dt*speed;
                x = x + v/1000;
                rct.x = x as int;
                rct.y = yy + speed/5*_sin(sin);
                sin = sin + PI*v/100000;
                if rct.x > 580 then
                    break;
                end
            end
        with
            every SDL_REDRAW do
                if ((((sin+PI/2)/PI) as int) % 2) == 0 then
                    _SDL_RenderCopy(&&outer.sdl!.ren, &&outer.img_dn.tex.tex, null,
                                    &&rct as _SDL_Rect&&);
                else
                    _SDL_RenderCopy(&&outer.sdl!.ren, &&outer.img_up.tex.tex, null,
                                    &&rct as _SDL_Rect&&);
                end
            end
        end
    end

    pool[5] Bird birds;

    every 1s do
        spawn Bird(20+_rand()%350, 100+_rand()%100) in birds;
    end
end

escape 0;

